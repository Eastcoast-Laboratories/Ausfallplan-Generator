const { test, expect } = require('@playwright/test');

test('Final verification - All critical features', async ({ page }) => {
    console.log('üîç FINAL VERIFICATION - Testing all critical features\n');
    
    // 1. Landing Page accessible
    console.log('1Ô∏è‚É£ Testing Landing Page...');
    await page.goto('http://localhost:8080/');
    await expect(page).toHaveTitle('Ausfallplan-Generator - Kita Scheduling Made Easy');
    console.log('   ‚úÖ Landing page accessible\n');
    
    // 2. Privacy page accessible
    console.log('2Ô∏è‚É£ Testing Privacy Page...');
    await page.goto('http://localhost:8080/pages/privacy');
    const privacyHeading = await page.locator('h1:has-text("Datenschutzerkl√§rung")').isVisible();
    expect(privacyHeading).toBeTruthy();
    console.log('   ‚úÖ Privacy page accessible\n');
    
    // 3. Imprint page accessible
    console.log('3Ô∏è‚É£ Testing Imprint Page...');
    await page.goto('http://localhost:8080/pages/imprint');
    const imprintHeading = await page.locator('h1:has-text("Impressum")').isVisible();
    expect(imprintHeading).toBeTruthy();
    console.log('   ‚úÖ Imprint page accessible\n');
    
    // 4. Login page accessible
    console.log('4Ô∏è‚É£ Testing Login Page...');
    await page.goto('http://localhost:8080/users/login');
    const emailField = await page.locator('input[name="email"]').isVisible();
    expect(emailField).toBeTruthy();
    console.log('   ‚úÖ Login page accessible\n');
    
    // 5. Registration page accessible
    console.log('5Ô∏è‚É£ Testing Registration Page...');
    await page.goto('http://localhost:8080/users/register');
    const regEmailField = await page.locator('input[name="email"]').isVisible();
    expect(regEmailField).toBeTruthy();
    console.log('   ‚úÖ Registration page accessible\n');
    
    // 6. Login works
    console.log('6Ô∏è‚É£ Testing Login Flow...');
    await page.goto('http://localhost:8080/users/login');
    await page.fill('input[name="email"]', 'admin@demo.kita');
    await page.fill('input[name="password"]', '84fhr38hf43iahfuX_2');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(2000);
    
    // Check we're on dashboard (either / or /dashboard)
    const currentUrl = page.url();
    const isLoggedIn = currentUrl.includes('dashboard') || currentUrl === 'http://localhost:8080/';
    expect(isLoggedIn).toBeTruthy();
    console.log(`   ‚úÖ Login successful (redirected to: ${currentUrl})\n`);
    
    // 7. Children page accessible after login
    console.log('7Ô∏è‚É£ Testing Children Page...');
    await page.goto('http://localhost:8080/children');
    await page.waitForTimeout(1000);
    const childrenPage = page.url().includes('children');
    expect(childrenPage).toBeTruthy();
    console.log('   ‚úÖ Children page accessible\n');
    
    // 8. Schedules page accessible
    console.log('8Ô∏è‚É£ Testing Schedules Page...');
    await page.goto('http://localhost:8080/schedules');
    await page.waitForTimeout(1000);
    const schedulesPage = page.url().includes('schedules');
    expect(schedulesPage).toBeTruthy();
    console.log('   ‚úÖ Schedules page accessible\n');
    
    // Take final screenshot
    await page.screenshot({ path: 'final_verification.png', fullPage: false });
    console.log('üì∏ Screenshot saved: final_verification.png\n');
    
    console.log('üéâ ALL CRITICAL FEATURES VERIFIED SUCCESSFULLY! üéâ');
});
